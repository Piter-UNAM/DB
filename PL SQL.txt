Transaccion de bases de datos
Una transaccion es una unidad atomica de trabajo con respecto a la recuperaciion y
consistencia de datos
Commit, confirma la transacción de datos(eliminar datos, por ejemplo)
rollback es para deshacer una accion de la transaccion de datos(como eliminar datos)
Caracteristicas de una transaccion en oracle
Atomicity	Todo o nada
Consistency	Antes o despues
Isolation	Cpncurrentes y aisladas
Durability	Terminacion anormal garantizada

ATM
Automatic Teller Machine
SET TRANSACTION NAME 'Insercion_datos';
insert into estudiante values('4019','LOPEZ','LENNY','R','MAT');
SAVEPOINT Despues_insertar;
UPDATE ESTUDIANTE
SET Nombre='Christian'
WHERE ID_Estudiante='4019';

https://en.wikipedia.org/wiki/Tuxedo_(software)#Features
https://www.oracle.com/lad/products/middleware/cloud-app-foundation/tuxedo/tuxedo/overview/index.html

SAVEPOINT Despues_actualizar;

ROLLBACK TO SAVEPOINT Despues_insertar;

UPDATE ESTUDIANTE
SET Nombre='Roberto'
WHERE ID_Estudiante='4019';

ROLLBACK;

SET TRANSACTION NAME 'Insercion2';
INSERT INTO ESTUDIANTE VALUES('2097','Peres','Juan','J','ING');
UPDATE ESTUDIANTE
SET Nombre='Natalia'
WHERE ID_Estudiante='2097';
COMMIT;

Gestor de base de datos utilizado por oracle se llama TUXEDO
Que es un servidor de transacciones
Ventajas y desventajas de tuxedo, que es, cuales son su caracteristicas
impreso

Cursores
Es un nombre asignado a un area de memoria que contiene la informacion 
resultante de la ejecucion de una referencia select de SQL. Es decir, 
al momento de ejecutar una instruccion sql, el conjunto de registros
que devuelve seran almacenados en un cursor

Cursor=Tabla virtual

DECLARE
lcNombre estudiante.nombre%TYPE;
lcApellido estudiantes.apellido%TYPE;
BEGIN
SELECT nombre,apellido
	INTO lcNombre,lcApellido
	From Estudiantes
	WHERE nombre=''Lenny and apellido='Perez';

END

CREATE OR REPLACE PROCEDURE <nombre_pricedimiento>

IS|AS
	CURSOR <Nombre_cursor>
	IS
		SELECT <col1,col2,coln> ||*
		FROM <tablas>
		WHERE <condición>
BEGIN
		OPEN<Nombre_cursor>
		FECTH<Nombre_curosr> INTO <>
//Incompleto


CREATE OR REPLACE PROCEDURE LECTURA 
IS 
CURSOR TABLA_VIRTUAL IS 
SELECT *FROM ESTUDIANTE;
ARREGLO TABLA_VIRTUAL%ROWTYPE;
BEGIN
OPEN TABLA_VIRTUAL;
FETCH TABLA_VIRTUAL INTO ARREGLO;
WHILE TABLA_VIRTUAL%FOUND
LOOP
DBMS_OUTPUT.PUT_LINE('NOMBRE: ' || ARREGLO.NOMBRE||' APELLIDO: '||ARREGLO.APELLIDO);
FETCH TABLA_VIRTUAL INTO ARREGLO;
END LOOP;
CLOSE TABLA_VIRTUAL;
END;
/

CREATE OR REPLACE PROCEDURE LECTURA 
IS 
CURSOR TABLA_VIRTUAL IS 
SELECT *FROM ESTUDIANTE;
ARREGLO TABLA_VIRTUAL%ROWTYPE;
BEGIN
OPEN TABLA_VIRTUAL;
FETCH TABLA_VIRTUAL INTO ARREGLO;
WHILE TABLA_VIRTUAL%FOUND
LOOP
DBMS_OUTPUT.PUT_LINE('NOMBRE: ' || ARREGLO.NOMBRE||' APELLIDO: '||ARREGLO.APELLIDO);
FETCH TABLA_VIRTUAL INTO ARREGLO;
END LOOP;
CLOSE TABLA_VIRTUAL;
END;
/

PARA EJECUTAR 
SET SERVEROUTPUT ON;
EXECUTE LECTURA;

--------------------------------------------------------

CREATE OR REPLACE PROCEDURE CURSOR_FORLOOP
IS 
CURSOR CR_LOOP
IS
SELECT *FROM CURSO;
V_RECEPTORA CR_LOOP%ROWTYPE;
BEGIN
FOR V_RECEPTORA IN CR_LOOP
LOOP
DBMS_OUTPUT.PUT_LINE(CR_LOOP%ROWCOUNT||' '|| V_RECEPTORA.NOMBRE_CURSO);
END LOOP;
END;
/

**PARA EJECUTAR 
SET SERVEROUTPUT ON;
EXECUTE LECTURA;

** PARA VER LOS CAMBIOS


---------------CURSORES CON PARAMETROS ------------

CREATE OR REPLACE PROCEDURE PARAMETROS(V_AP IN VARCHAR)
AS
CURSOR CR_PARAMETRO(V_APELLIDO IN VARCHAR2)
IS 
SELECT *
FROM ESTUDIANTE
WHERE APELLIDO=V_APELLIDO;
V_RECEPTORA CR_PARAMETRO%ROWTYPE;

BEGIN 
FOR V_RECEPTORA IN CR_PARAMETRO(V_AP)
LOOP
DBMS_OUTPUT.PUT_LINE(V_RECEPTORA.NOMBRE);
END LOOP;
END;
/


---------------Cursor Tarea-------------------

CREATE OR REPLACE PROCEDURE PARAMETROS(V_ID IN VARCHAR)
AS

CURSOR CR_PARAMETRO(V_IDS IN VARCHAR2)
IS 
SELECT *
FROM ESTUDIANTE
WHERE  ID_ESTUDIANTE=V_ID;

CURSOR CR_PARAMETRO2(V_IDS IN VARCHAR2)
IS 
SELECT INS.NUM_CURSO, CU.NOMBRE_CURSO, CU.CREDITOS
FROM CURSO CU INNER JOIN INSCRIPCION INS ON CU.NUM_CURSO=INS.NUM_CURSO 
WHERE ID_ESTUDIANTE=V_id;

V_RECEPTORA CR_PARAMETRO%ROWTYPE;
V_RECEPTORA CR_PARAMETRO2%ROWTYPE;

BEGIN 

FOR V_RECEPTORA IN CR_PARAMETRO(V_ID)
LOOP
DBMS_OUTPUT.PUT_LINE('El alumno  '||V_RECEPTORA.NOMBRE||'  '||V_RECEPTORA.APELLIDO||'  esta inscrito en los cursos siguientes:');
DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------------------');

FOR V_RECEPTORA IN CR_PARAMETRO2(V_ID)
LOOP
DBMS_OUTPUT.PUT_LINE(V_RECEPTORA.NUM_CURSO||'  '||V_RECEPTORA.NOMBRE_CURSO||'  '|| V_RECEPTORA.CREDITOS);
END LOOP;
END LOOP;

DBMS_OUTPUT.PUT_LINE('----------------------------------------------------------------------------');
END;
/

Probando Cursor

SQL> SET SERVEROUTPUT ON;
SQL> EXECUTE PARAMETROS('2907');
El alumno  PEDRO  LOPEZ  esta inscrito en los cursos siguientes:
----------------------------------------------------------------------------
MAT0011  MATEMATICAS DISCRETAS  8
----------------------------------------------------------------------------

PL/SQL procedure successfully completed.

SQL> EXECUTE PARAMETROS('5145');
El alumno  LUIS  SANTANA  esta inscrito en los cursos siguientes:
----------------------------------------------------------------------------
SOC0102  ASCENSO DEL HOMBRE  8
----------------------------------------------------------------------------

PL/SQL procedure successfully completed.

Probando cuando el alumno no esta inscrito a algun curso

PL/SQL procedure successfully completed.

SQL> EXECUTE PARAMETROS('7810');
El alumno  RICARDO  MARTINEZ  esta inscrito en los cursos siguientes:
----------------------------------------------------------------------------
----------------------------------------------------------------------------

PL/SQL procedure successfully completed.

SQL> EXECUTE PARAMETROS('6985');
El alumno  CARLOS  MENDIETA  esta inscrito en los cursos siguientes:
----------------------------------------------------------------------------
----------------------------------------------------------------------------

PL/SQL procedure successfully completed.

---------------------------------Trigger------------------------------------
BEFORE/AFTER: Elemento que dispara trigger
nombre: nombre del trigger que tiene que ser unico
FOR EACH_ Nivel del disparo del trigger que por defecto es statement, indicando que se activa una sola vez
por cada operación, sin importar la cantidad de filas afectadas.
FOR EACH ROW: Salta por cada fila afectada, Variables posibles para update, la primera es: old que hace 
referencia a los valoes anteriors y :new que hace referencia a los nuevos valores de actualizacion de la fila.


+++Tabla Clientes+++

create table Clientes (
codigo varchar(2),
nombre varchar(15),
limite number(8,2));

+++trigger+++

create or replace trigger insercion after insert 
on clientes for each row
begin 
dbms_output.put_line('Cliente adicionado');
end;
/

+++tabla auditor+++

create table Auditor(
registro varchar2(20));

+++trigger+++

create or replace trigger auditar_clientes
after update
on clientes
for each row 
begin 
insert into auditor
values(
	'Anterior'||:old.limite||
	' Nuevo' ||:new.limite);
end;
/ 

SQL> create or replace trigger insercion after insert
  2  on clientes for each row
  3  begin
  4  dbms_output.put_line('Cliente adicionado');
  5  end;
  6  /

Trigger created.

SQL> INSERT INTO CLIENTES VALUES('20','PABLO','4');

1 row created.

SQL> SET SERVEROUTPUT ON;
SQL> INSERT INTO CLIENTES VALUES('10','PACO','3');
Cliente adicionado

1 row created.

SQL> create table Auditor(
  2  registro varchar2(20));

Table created.

SQL> create or replace trigger auditar_clientes
  2  after update
  3  on clientes
  4  for each row
  5  begin
  6  insert into auditor
  7  values(
  8  'Anterior'||:old.limite||
  9  ' Nuevo' ||:new.limite);
 10  end;
 11  /

Trigger created.

SQL> DROP TABLE AUDITOR;

Table dropped.

SQL> CREATE TABLE Auditor(
  2  registro varchar2(40));

Table created.

SQL> UPDATE CLIENTES
  2  SET codigo='89', nombre='PABLO', limite='4'
  3  where codigo='10';

1 row updated.

SQL> SELECT * FROM AUDITOR;

REGISTRO
----------------------------------------
Anterior3 Nuevo4

SQL> SELECT * FROM CLIENTES;

CO NOMBRE              LIMITE
-- --------------- ----------
20 PABLO                    4
89 PABLO                    4


SQL> create table Estados(
  2  codigo_estado varchar(2),
  3  nombre_estado varchar(15),
foreign key (codigo_estado) references clientes(codigo));

++++++++++ Anexar nueva columna a la tabla Clientea++++++++

ALTER TABLE Clientes ADD estado VARCHAR(15);

++++++++++ Asignar llave primaria a la tabla clientes++++++

ALTER TABLE Clientes ADD primary key (codigo);


create or replace view clientes_estados 
as 
select codigo, nombre, limite, estado, Nombre_estado
from clientes, estados 
where 
clientes.estado=estados.codigo_estado;
/
+++++++ Dar de alta datos a la tabla Estados++++++

insert into Estados values('1','Mexico');

create or replace trigger sustitucion 
instead of delete or insert
on clientes_estados
for each row
begin
if deleting then 
insert into auditor values('Borrando '||:old.limite);
end if;
if inserting then
insert into auditor values('insertando '||:new.limite);
end if;
end;
/

insert into clientes_estados values('3','Carlos',610.2,'3','Jalisco');


create table conexiones (usuario varchar (15),
			momento date,
			evento varchar (20));


create or replace trigger ejemplo 
after logon 
on database
begin
insert into conexiones(usuario, momento, evento)
values(ora_login_user,systimestamp,ora_sysevent);
end;
/




Arreglos PL/SQL

Oracle proporciona una estructura de datos llamada varray

DECLARE 
TYPE ARREGLO_DE_NOMBRES IS VARRAY(5) OF VARCHAR2(10);
TYPE RESULTADO IS VARRAY(5) OF INTEGER;
NOMBRES ARREGLO_DE_NOMBRES;
CAL RESULTADO;
TOTAL INTEGER;
BEGIN 
NOMBRES:=ARREGLO_DE_NOMBRES('CARLOS','ZITA','MIRIAM','NATALIA','JESSY');
CAL:=RESULTADO(10,9,7,8,6);
TOTAL:=NOMBRES.COUNT;
DBMS_OUTPUT.PUT_LINE('TOTAL'|| TOTAL ||'ALUMNOS');
DBMS_OUTPUT.PUT_LINE('ALUMNO           CALIFICACION');
FOR I IN 1 ..TOTAL LOOP
DBMS_OUTPUT.PUT_LINE(NOMBRES(I) ||'---------------------->'||CAL(I));
END LOOP;
END;
/

DECLARE
    TYPE l_tab2 IS VARRAY(5) OF VARCHAR2(20);
    l_temp NUMBER;
  BEGIN
    /* set up the test data */
    l_tab2(1) := '10';
    l_tab2(2) := '15';
    l_tab2(3) := '5';
    l_tab2(4) := '20';
    /* implement bubble sort */
    for i in 1..l_tab2.COUNT-1
    loop
      for j in 2..l_tab2.COUNT
      loop
        if l_tab2(j) < l_tab2(j-1)
        then
          l_temp := l_tab2(j-1);
          l_tab2(j-1) := l_tab2(j);
          l_tab2(j) := l_temp;
        END IF;
      END LOOP;
    END LOOP;
    /* just to prove they are sorted (remove the reverse for ascending order) */
    FOR i IN REVERSE 1..l_tab2.COUNT
    LOOP
      dbms_output.put_line(l_tab2(i));
    END LOOP;
 END;
 /

DECLARE 
TYPE RESULTADO IS VARRAY(20) OF INTEGER;
CAL RESULTADO;
TOTAL INTEGER;
BEGIN 
CAL:=RESULTADO(9,10,8,9,2,1,10,20,30,40,10,20,50,20,30,40,90,40,50,10);
 for i in 1..CAL.COUNT-1
    loop
      for j in 2..CAL.COUNT
      loop
        if CAL(j) < CAL(j-1)
        then
          TOTAL := CAL(j-1);
          CAL(j-1) := CAL(j);
          CAL(j) := TOTAL;
        END IF;
      END LOOP;
    END LOOP;
    /* just to prove they are sorted (remove the reverse for ascending order) */
    FOR i IN REVERSE 1..CAL.COUNT
    LOOP
      dbms_output.put_line(CAL(i));
    END LOOP;
 END;
 /

DECLARE 
CURSOR CURSOR_ESTUDIANTE IS
SELECT NOMBRE FROM ESTUDIANTE;
TYPE ARREGLO_ESTUDIANTE IS VARRAY(10) OF ESTUDIANTE.NOMBRE %TYPE;
LISTA_DE_NOMBRES ARREGLO_ESTUDIANTE:=ARREGLO_ESTUDIANTE();
CONTADOR INTEGER:=0;
BEGIN
FOR INICIO IN CURSOR_ESTUDIANTE LOOP
CONTADOR:=CONTADOR + 1;
LISTA_DE_NOMBRES.EXTEND;
LISTA_DE_NOMBRES(CONTADOR):=INICIO.NOMBRE;
DBMS_OUTPUT.PUT_LINE('ESTUDIANTE('||CONTADOR||':'||LISTA_DE_NOMBRES(CONTADOR));
END LOOP;
END;
/

CREATE OR REPLACE FUNCTION LEE_ID_MATERIA
(V_ID_ESTUDIANTE IN ESTUDIANTE.ID_ESTUDIANTE%TYPE)
RETURN VARCHAR2
IS
V_MATERIA ESTUDIANTE.ID_MATERIA%TYPE;
BEGIN
SELECT ID_MATERIA
INTO V_MATERIA
FROM ESTUDIANTE
WHERE ID_ESTUDIANTE=V_ID_ESTUDIANTE;
RETURN(V_MATERIA);
END;
/

START LEE_ID_MATERIA

VARIABLE G_MATERIA VARCHAR2(5)
EXECUTE :G_MATERIA := LEE_ID_MATERIA('4019')
PRINT G_MATERIA
G_MATERIA

Buscar ODBC y como conectarme al gestoy de la base de datos
Orígenes de datos ODBC (64 bits)

create or replace function calculadora(
num1 number,
num2 number,
operador in varchar2)
return number
is 

begin
if operador='+'
then return (num1 + num2);
end if;

if operador='-'
then return (num1 - num2);
end if;

if operador='*'
then return (num1 * num2);
end if;

if operador='/'
then return (num1 / num2);
end if;
end;
/

--------------- ejecutar funcion calculadora -----------------

variable res number; //se crea la variables antes de ejecutar
execute :res:=calculadora(5,6,'/'); // Ejecutamos la funcion con los parametros.
print res; // imprimimos la variable que se declaro al principio para poder ver el resultado.

-------------- checando lo que muestran las funciones de caracteres.
select chr(64) from dual;
select chr(80)||chr(101)||chr(114)||chr(114)||chr(111)"Gato"from dual;
select CONCAT(CONCAT('HOLA','LUIS'),'FELIPE') from dual;
select INITCAP('mexico esta en fraude electora')"capitals" from dual;
select power(2,2) "potencia"from dual;

----------------Funciones SQL------------------------------

SQL> SELECT * FROM DUAL;

D
-
X

SQL> DUMMY
SP2-0042: unknown command "DUMMY" - rest of line ignored.
SQL> DUMMY;
SP2-0042: unknown command "DUMMY" - rest of line ignored.
SQL> DESCRIBE DUAL;
 Name                                      Null?    Type
 ----------------------------------------- -------- ----------------------------
 DUMMY                                              VARCHAR2(1)

SQL> SELECT REPLACE ('JUAN','UA';'OH') FROM DUAL
  2  ;
SELECT REPLACE ('JUAN','UA';'OH') FROM DUAL
                           *
ERROR at line 1:
ORA-00911: invalid character


SQL> SELECT REPLACE ('JUAN','UA','OH') FROM DUAL;

REPL
----
JOHN

SQL> SELECT REPLACE ('JUAN','UA','OH') FROM AREA;
SELECT REPLACE ('JUAN','UA','OH') FROM AREA
                                       *
ERROR at line 1:
ORA-04044: procedure, function, package, or type is not allowed here


SQL> SELECT REPLACE ('JUAN','UA','OH') FROM area;
SELECT REPLACE ('JUAN','UA','OH') FROM area
                                       *
ERROR at line 1:
ORA-04044: procedure, function, package, or type is not allowed here


SQL> systimestamp
SP2-0734: unknown command beginning "systimesta..." - rest of line ignored.
SQL> SYSTIMESTAMP;
SP2-0734: unknown command beginning "SYSTIMESTA..." - rest of line ignored.
SQL> SELECT SYSTIMESTAMP FROM DUAL
  2  ;

SYSTIMESTAMP
---------------------------------------------------------------------------
25/09/18 09:46:10.744000 -05:00

SQL> select chr(80)||chr(114)||chr(114)||chr(111)"Gato" from dual;

Gato
----
Prro

SQL> select initcap('universidad nacional autonoma de mexico')"Capitals" from dual;

Capitals
---------------------------------------
Universidad Nacional Autonoma De Mexico

SQL> Update estudiante set id_materia=REPLACE(Id_Materia,'M','F');

9 rows updated.

SQL> select ascii(id_materia) from estudiante;

ASCII(ID_MATERIA)
-----------------
               70
               70
               73
               70
               67
               73
               70
               70
               73

9 rows selected.

set termout on;
set serveroutput on;
set ver off;
declare	
i number :=0;	
numero number := 1;	
type tabla is table of number index by binary_integer;	
resto tabla;
begin	
dbms_output.put_line('Dame el numero:');	
numero := '&numero';		
while numero >= 2 
loop	
resto(i) := mod(numero,2);	
numero := (numero- resto(i))/2;	
i := i + 1;	
end loop;	
resto(i) := numero;	
while i >= 0 loop	
dbms_output.put(resto(i)||rpad('	',1));	
i := i - 1;	
end loop;	
dbms_output.put_line ('	');
end;
/

CREATE TABLE CUENTAS (ID_CUENTA NUMBER(2), BALANCE NUMBER);
CREATE TABLE ACCION (ID_CUENTA NUMBER(2), TIPO_OPERACION VARCHAR2(1),
NUEVO_VALOR NUMBER,ESTADO VARCHAR(40), FECHA DATE);

CREATE PROCEDURE BATCH
IS
BEGIN
	DECLARE
		CURSOR c1 IS
		SELECT ID_Cuenta, Tipo_operacion, Nuevo_Valor FROM Accion
		ORDER BY FECHA
			FOR UPDATE OF ESTADO;
		BEGIN
		FOR acct IN c1 LOOP
			acct.Tipo_operacion:=upper(acct.Tipo_operacion);
/*--------------------------*/
/*Hace un UPDATE. Si la cuenta a actualizarse no existe*/
/*Crea una nueva cuenta*/
/*--------------------------*/
IF acct.Tipo_operacion= "U" THEN
UPDATE CUENTAS SET Balance = acct.NUEVO_VALOR
WHERE ID_Cuenta = acct.ID_Cuenta;
IF SQL%NOTFOUND THEN INSERT INTO CUENTAS
VALUES (acct.ID_Cuenta, acct.NUEVO_VALOR);
UPDATE ACCION SET ESTADO = 
'Update: ID NO EXISTE, VALOR INSERTADO.'
WHERE CURRENT OF c1;
ELSE
UPDATE ACCION SET ESTADO = 'Update: EXITOSO.'
WHERE CURRENT OF c1;
END IF;
/*--------------------------*/
/*Proceso INSERT. Si la cuenta ya existe*/
/*Hacer un actualizacion de la cuenta*/
/*--------------------------*/
ELSEIF acct.Tipo_operacion= "I" THEN 
BEGIN
INSERT INTO CUENTAS
VALUES (acct.ID_Cuenta,acct.NUEVO_VALOR);
UPDATE ACCION set ESTADO = 'Insert:EXITOSO.'
WHERE CURRENT OF c1;
EXCEPTION
WHEN DUP_VAL_ON_INDEX THEN-La cuenta ya existe
UPDATE CUENTAS SET Balance = acct.NUEVO_VALOR
WHERE ID_Cuenta = acct.ID_Cuenta;
UPDATE ACCION SET ESTADO = 
'Insert: Acct exist. Se actualizo.'
WHERE CURRENT OF c1;
END IF;
/*--------------------------*/
/*Proceso DELET. Si la cuenta ya existe*/
/*Poner el estado. La cuenta no existe */
/*--------------------------*/
ELSEIF acct.Tipo_operacion = 'D' THEN
DELETE FROM CUENTAS
WHERE ID_Cuenta = acct.ID_Cuenta;
IF SQL%NOTFOUND THEN
UPDATE ACCION SET ESTADO = 'Delete: ID NO EXISTE.'
WHERE CURRENT OF c1;
ELSE
UPDATE ACCION SET ESTADO = 'Delet:Exitoso.'
WHERE CURRENT OF c1;
END IF;
/*--------------------------*/
/*Invalido*/
/*--------------------------*/
ELSE
UPDATE ACCION SET ESTADO = 
'OPERACION INVALIDAD. NO SE HIZO NADA'
WHERE CURRENT OF c1;
END IF;
END LOOP;
COMMIT;
END;
END; 
/